//
//  HomeListBeersViewController.swift
//  TheBeerProject_CA
//
//  Created by Nunzio Giulio Caggegi on 01/02/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeListBeersDisplayLogic: class
{
    func displayBeersList(viewModel: HomeListBeers.Something.ViewModel)
    func displayCategories(viewModel: HomeListBeers.Categories.ViewModel)
}

class HomeListBeersViewController: UIViewController, HomeListBeersDisplayLogic
{
  var interactor: HomeListBeersBusinessLogic?
  var router: (NSObjectProtocol & HomeListBeersRoutingLogic & HomeListBeersDataPassing)?
    
  // MARK: View
    var header: UIView?
    let search = UISearchController(searchResultsController: nil)
    
  // MARK: - Business properties
    var homeListBeersDataProvider: HomeListBeersDataProvider?
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
    
    // MARK: - UI properties
    var _view: HomeListBeer? {
        guard let view = view as? HomeListBeer else { preconditionFailure("Unable to cast view to LoginView")}
        return view
    }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = HomeListBeersInteractor()
    let presenter = HomeListBeersPresenter()
    let router = HomeListBeersRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
    
    override func loadView() {
        view = HomeListBeer()
    }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    homeListBeersDataProvider = HomeListBeersDataProvider(collectionView: _view!.beerCollectionView)
    fetchList()
    configureUI()
    setSearchBar()
    fetchCategories()
  }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        router?.presentTutorial()
    }
    
    func configureUI() {
        self.title = "Beer Box"
        
        // Collection beer list
        _view?.beerCollectionView.register(CategoryCollectionViewCell.self, forCellWithReuseIdentifier: "categoryCollectionViewCell")
        _view?.beerCollectionView.register(BeerCollectionViewCell.self, forCellWithReuseIdentifier: "beerTableViewCell")
        _view?.beerCollectionView.register(HeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "beerListHeader")
        _view?.beerCollectionView.delegate = self
        
        if #available(iOS 13.0, *) {
            let appearance = UINavigationBarAppearance()
            appearance.titleTextAttributes = [.foregroundColor: UIColor.white]
            appearance.largeTitleTextAttributes = [.foregroundColor: UIColor.white]
            appearance.backgroundColor = UIColor(named: "AppMainColor")

            navigationItem.standardAppearance = appearance
            navigationItem.scrollEdgeAppearance = appearance
        } else {
            
        }
    }
    
    func setSearchBar() {
        self.navigationItem.hidesSearchBarWhenScrolling = false
        self.navigationItem.searchController = search
        search.searchBar.delegate = self
        search.searchBar.barStyle = .default
        search.searchBar.barTintColor = UIColor.white
        search.searchBar.tintColor = UIColor.white
        search.searchBar.setTextColorAndTextFont(color: .white, font: UIFont.systemFont(ofSize: 12))
    }
  
  // MARK: Do something
    
  func fetchList() {
    let request = HomeListBeers.Something.Request()
    interactor?.fetchListBeer(request: request)
  }
    
    func fetchCategories() {
        let request = HomeListBeers.Categories.Request()
        interactor?.fetchCategories(request: request)
    }
  
  func displayBeersList(viewModel: HomeListBeers.Something.ViewModel) {
    if let beers = viewModel.beers {
        homeListBeersDataProvider?.beersDisplayed = beers
        homeListBeersDataProvider?.applySnapshot(beers: homeListBeersDataProvider?.beersDisplayed, categories: homeListBeersDataProvider?.categories)
    }
  }
    
    func displayCategories(viewModel: HomeListBeers.Categories.ViewModel) {
        let categories = viewModel.categories
        homeListBeersDataProvider?.categories = categories
        homeListBeersDataProvider?.applySnapshot(beers: homeListBeersDataProvider?.beersDisplayed, categories: categories)
    }
}

extension HomeListBeersViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchBar.setTextColorAndTextFont(color: .white, font: UIFont.systemFont(ofSize: 12))
        let request = HomeListBeers.Something.Request(page: 1, beerName: searchText, category: interactor?.category)
        interactor?.fetchListBeer(request: request)
    }
}

extension HomeListBeersViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.section == 0 {
            
            if let category = homeListBeersDataProvider?.categories[indexPath.item] {
                let categoryRequest = HomeListBeers.Categories.Request(index: indexPath.item)
                interactor?.refreshCategories(request: categoryRequest)
                
                let request = HomeListBeers.Something.Request(page: 1, beerName: "", category: category)
                interactor?.fetchListBeer(request: request)
            }
        } else {
            interactor?.fetchBeerByIndex(indexPath: indexPath)
            router?.routeToDetail()
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if indexPath.section == 1 {
            let lastElement = ((homeListBeersDataProvider?.beersDisplayed.count ?? 0) - 1)
            if((indexPath.row == lastElement)) && ((homeListBeersDataProvider?.beersDisplayed.count ?? 0) > 3) {
                let request = HomeListBeers.Something.Request(page: (interactor?.page ?? 0) + 1, beerName: interactor?.beerName, category: interactor?.category)
                interactor?.fetchListBeer(request: request)
            }
        }
    }
}
