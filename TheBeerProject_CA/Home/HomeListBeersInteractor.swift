//
//  HomeListBeersInteractor.swift
//  TheBeerProject_CA
//
//  Created by Nunzio Giulio Caggegi on 01/02/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeListBeersBusinessLogic {
    func fetchListBeer(request: HomeListBeers.Something.Request)
    func fetchCategories(request: HomeListBeers.Categories.Request)
    func fetchBeerByIndex(indexPath: IndexPath)
    
    var page: Int { get set }
    var beerName: String { get set }
    var category: String { get set }
}

protocol HomeListBeersDataStore {
  var beers: [Beer]? { get set }
    var beerToDetail: Beer? { get set }
}

class HomeListBeersInteractor: HomeListBeersBusinessLogic, HomeListBeersDataStore {
    
    var page: Int = 0
    
    var beerName: String = ""
    
    var category: String = ""
    
    var beers: [Beer]? = nil
    var beerToDetail: Beer? = nil
    
    private var isFinished: Bool = false
    
  var presenter: HomeListBeersPresentationLogic?
  var worker: HomeListBeersWorker?
  
  // MARK: Do something
  
  func fetchListBeer(request: HomeListBeers.Something.Request) {
    self.page = request.page ?? 1
    self.beerName = request.beerName ?? beerName
    self.category = request.category ?? ""
    
    if (category != "" || beerName != "") && page == 1 {
        beers?.removeAll()
        self.isFinished = false
    }
    
    worker = HomeListBeersWorker()
    worker?.callAPIBeers(page: self.page, beerName: self.beerName, category: self.category, completion: { (beers) in
        if self.beers == nil {
            self.beers = beers?.beers
        } else {
            if beers?.beers?.count == 0 {
                self.isFinished = true
            }
            self.beers! += beers?.beers ?? []
        }
        if let beers = self.beers {
            if self.isFinished == false {
                let response = HomeListBeers.Something.Response(beers: beers)
                self.presenter?.presentBeersResponse(response: response)
            }
        }
    })
  }
    
    func fetchCategories(request: HomeListBeers.Categories.Request) {
        if category == "" {
            worker = HomeListBeersWorker()
            worker?.fetchCategories(completion: { (categories) in
                let response = HomeListBeers.Categories.Response(categories: categories)
                self.presenter?.presentCategories(response: response)
            })
        }
    }
    
    func fetchBeerByIndex(indexPath: IndexPath) {
        if let beers = beers {
            self.beerToDetail = beers[indexPath.row]
        }
    }
}
